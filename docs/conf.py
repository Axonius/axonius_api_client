# -*- coding: utf-8 -*-
"""Sphinx config."""
from __future__ import absolute_import, division, print_function, unicode_literals

#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

# sys.path.insert(0, os.path.abspath('.'))

sys.path.insert(0, os.path.abspath(".."))
sys.path.insert(0, os.path.abspath("_themes"))

import axonius_api_client as pkg  # noqa


def strip(t):  # noqa
    return t.replace(" ", "").replace("_", "").strip()


# -- Project information -----------------------------------------------------

project = pkg.version.__project__
copyright = pkg.version.__copyright__.replace("Copyright", "").strip()
author = pkg.version.__author__

# The short X.Y version
version = pkg.version.__version__
# The full version, including alpha/beta/rc tags
release = pkg.version.__version__

pkg_project = pkg.version.__project__
pkg_title = pkg.version.__title__

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosectionlabel",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "sphinx.ext.napoleon",
    # https://github.com/OddBloke/sphinx-git
    "sphinx_git",
    # only used for doc dev
    # https://pypi.org/project/sphinxcontrib-spelling/
    # "sphinxcontrib.spelling",
    # LOOK INTO LATER:
    # https://github.com/WhyNotHugo/sphinx-autorun
    # "sphinx_autorun",
]

# settings for sphinxcontrib.spelling
# spelling_show_suggestions = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
# language = None
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# Add a small piece of rST text in the prolog/epilog of EVERY file
rst_epilog = ""

# -- Options for HTML output -------------------------------------------------

import sphinx_bootstrap_theme  # noqa

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'
html_theme = "bootstrap"
html_theme_path = sphinx_bootstrap_theme.get_html_theme_path()

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}
html_theme_options = {
    # Navigation bar title. (Default: ``project`` value)
    # 'navbar_title': "Demo",
    # Tab name for entire site. (Default: "Site")
    "navbar_site_name": "TOC",
    # A list of tuples containing pages or urls to link to.
    # Valid tuples should be in the following forms:
    #    (name, page)                 # a link to a page
    #    (name, "/aa/bb", 1)          # a link to an arbitrary relative url
    #    (name, "http://example.com", True) # arbitrary absolute url
    # Note the "1" or "True" value above as the third argument to indicate
    # an arbitrary url.
    "navbar_links": [
        # ("Examples", "examples"),
        # ("Link", "http://example.com", True),
        ("GitHub Repository", pkg.version.__url__, True),
        ("Axonius", "https://axonius.com", True),
    ],
    # Render the next and previous page links in navbar. (Default: true)
    "navbar_sidebarrel": True,
    # Render the current pages TOC in the navbar. (Default: true)
    "navbar_pagenav": True,
    # Tab name for the current pages TOC. (Default: "Page")
    "navbar_pagenav_name": "Page",
    # Global TOC depth for "site" navbar tab. (Default: 1)
    # Switching to -1 shows all levels.
    "globaltoc_depth": 2,
    # Include hidden TOCs in Site navbar?
    #
    # Note: If this is "false", you cannot have mixed ``:hidden:`` and
    # non-hidden ``toctree`` directives in the same page, or else the build
    # will break.
    #
    # Values: "true" (default) or "false"
    "globaltoc_includehidden": "false",
    # HTML navbar class (Default: "navbar") to attach to <div> element.
    # For black navbar, do "navbar navbar-inverse"
    "navbar_class": "navbar navbar-inverse",
    # Fix navigation bar to top of page?
    # Values: "true" (default) or "false"
    "navbar_fixed_top": "true",
    # Location of link to source.
    # Options are "nav" (default), "footer" or anything else to exclude.
    "source_link_position": "nav",
    # Bootswatch (http://bootswatch.com/) theme.
    #
    # Options are nothing (default) or the name of a valid theme
    # such as "cosmo" or "sandstone".
    #
    # The set of valid themes depend on the version of Bootstrap
    # that's used (the next config option).
    #
    # Currently, the supported themes are:
    # - Bootstrap 2: https://bootswatch.com/2
    # - Bootstrap 3: https://bootswatch.com/3
    "bootswatch_theme": "united",
    # Choose Bootstrap version.
    # Values: "3" (default) or "2" (in quotes)
    "bootstrap_version": "3",
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}
# html_sidebars = {'**': ['csidebar.html', 'searchbox.html']}

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "{}doc".format(strip(pkg_project))


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "{}.tex".format(strip(pkg_project)),
        "{} Documentation".format(pkg_project),
        author,
        "manual",
    )
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, strip(pkg_title), "{} Documentation".format(pkg_project), [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        strip(pkg_project),
        "{} Documentation".format(pkg_project),
        author,
        strip(pkg_project),
        pkg.version.__description__,
        "Miscellaneous",
    )
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# -- Extension configuration -------------------------------------------------

# -- Options for autodoc extension -------------------------------------------

autodoc_default_options = {
    # This value selects if automatically documented members are sorted:
    # by alphabetical (value 'alphabetical')
    # by member type (value 'groupwise')
    # by source order (value 'bysource')
    # The default is alphabetical.
    "member-order": "bysource"
}

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    "python": ("http://docs.python.org/3", None),
    # FUTURE: requests doc site down for now, re-enable later
    "requests": ("https://2.python-requests.org//en/master/", None),
    "urllib3": ("https://urllib3.readthedocs.io/en/latest/", None),
}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for Napoleon -------------------------------------------------

# True to parse Google style docstrings.
# False to disable support for Google style docstrings.
# Defaults to True.
napoleon_google_docstring = True

# True to parse NumPy style docstrings.
# False to disable support for NumPy style docstrings.
# Defaults to True.
napoleon_numpy_docstring = False

# True to list __init___ docstrings separately from the class docstring.
# False to fall back to Sphinx’s default behavior, which considers the __init___
# docstring as part of the class documentation. Defaults to False.
napoleon_include_init_with_doc = True

# True to include private members with docstrings in the documentation.
# False to fall back to Sphinx’s default behavior. Defaults to False.
napoleon_include_private_with_doc = True

# True to include special members with docstrings in the documentation.
# False to fall back to Sphinx’s default behavior. Defaults to True.
napoleon_include_special_with_doc = True

# True to use the .. admonition:: directive for the Example and Examples sections.
# False to use the .. rubric:: directive instead.
# One may look better than the other depending on what HTML theme is used.
# Defaults to False.
napoleon_use_admonition_for_examples = True

# True to use the .. admonition:: directive for Notes sections.
# False to use the .. rubric:: directive instead. Defaults to False.
napoleon_use_admonition_for_notes = True

# True to use the .. admonition:: directive for References sections.
# False to use the .. rubric:: directive instead. Defaults to False.
napoleon_use_admonition_for_references = True

# True to use the :ivar: role for instance variables.
# False to use the .. attribute:: directive instead. Defaults to False.
napoleon_use_ivar = False

# True to use a :param: role for each function parameter.
# False to use a single :parameters: role for all the parameters. Defaults to True.
napoleon_use_param = True

# True to use a :keyword: role for each function keyword argument.
# False to use a single :keyword arguments: role for all the keywords. Defaults to True.
napoleon_use_keyword = True

# True to use the :rtype: role for the return type.
# False to output the return type inline with the description. Defaults to True.
napoleon_use_rtype = True
